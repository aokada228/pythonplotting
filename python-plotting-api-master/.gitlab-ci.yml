# CI/CD  Deployment pipeline
# Test on Gitlab
# Build and deploy to Herokus Docker Runtime
# ---------------------------------------------------------------------------

.devops: &devops |
  # Deployment functions and so on
  [[ "$TRACE" ]] && set -x

  function install_docker_manually() {
    apt-get -qq install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
    curl -fsSL https://download.docker.com/linux/debian/gpg |  apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    apt-get -qq update -y
    apt-get -qq install -y docker-ce
  }

image: alpine:latest

stages:
  - test
  - deploy

test:
  stage: test
  image:  python:3.7-stretch
  script:
    - pip install --no-cache-dir --trusted-host pypi.python.org pipenv
    - pipenv install --dev
    - pipenv run py.test

deploy:
  stage: deploy
  image: docker:latest
  variables:
    HEROKU_APPNAME: "python-sci-plotting"
    DOCKER_DRIVER: overlay2
    ENVIRONMENT: prod
  services:
  - docker:dind
  script:
  - docker build --build-arg run_env="$ENVIRONMENT" --iidfile imageid.txt -t "registry.heroku.com/$HEROKU_APPNAME/my-app" .
  - docker login -u _ -p $HEROKU_TOKEN registry.heroku.com
  - docker push "registry.heroku.com/$HEROKU_APPNAME/my-app"
  - apk add --no-cache curl
  - echo "Docker Image ID is $(cat imageid.txt)"
  - |-
    curl -X PATCH "https://api.heroku.com/apps/$HEROKU_APPNAME/formation" --header "Content-Type: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-releases" --header "Authorization: Bearer ${HEROKU_TOKEN}" --data '{ "updates": [ { "type": "web", "docker_image": "'$(cat imageid.txt)'" } ] }'
  only:
    - branches



before_script:
  - *devops
